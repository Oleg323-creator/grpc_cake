// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: quoteswap/quoteswap.proto

package quoteswap

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuoteSwapService_GetQuote_FullMethodName    = "/quoteswap.QuoteSwapService/GetQuote"
	QuoteSwapService_ExecuteSwap_FullMethodName = "/quoteswap.QuoteSwapService/ExecuteSwap"
)

// QuoteSwapServiceClient is the client API for QuoteSwapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteSwapServiceClient interface {
	GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error)
	ExecuteSwap(ctx context.Context, in *ExecuteTxRequest, opts ...grpc.CallOption) (*ExecuteTxResponse, error)
}

type quoteSwapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteSwapServiceClient(cc grpc.ClientConnInterface) QuoteSwapServiceClient {
	return &quoteSwapServiceClient{cc}
}

func (c *quoteSwapServiceClient) GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuoteResponse)
	err := c.cc.Invoke(ctx, QuoteSwapService_GetQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteSwapServiceClient) ExecuteSwap(ctx context.Context, in *ExecuteTxRequest, opts ...grpc.CallOption) (*ExecuteTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteTxResponse)
	err := c.cc.Invoke(ctx, QuoteSwapService_ExecuteSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuoteSwapServiceServer is the server API for QuoteSwapService service.
// All implementations must embed UnimplementedQuoteSwapServiceServer
// for forward compatibility.
type QuoteSwapServiceServer interface {
	GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error)
	ExecuteSwap(context.Context, *ExecuteTxRequest) (*ExecuteTxResponse, error)
	mustEmbedUnimplementedQuoteSwapServiceServer()
}

// UnimplementedQuoteSwapServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuoteSwapServiceServer struct{}

func (UnimplementedQuoteSwapServiceServer) GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (UnimplementedQuoteSwapServiceServer) ExecuteSwap(context.Context, *ExecuteTxRequest) (*ExecuteTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSwap not implemented")
}
func (UnimplementedQuoteSwapServiceServer) mustEmbedUnimplementedQuoteSwapServiceServer() {}
func (UnimplementedQuoteSwapServiceServer) testEmbeddedByValue()                          {}

// UnsafeQuoteSwapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuoteSwapServiceServer will
// result in compilation errors.
type UnsafeQuoteSwapServiceServer interface {
	mustEmbedUnimplementedQuoteSwapServiceServer()
}

func RegisterQuoteSwapServiceServer(s grpc.ServiceRegistrar, srv QuoteSwapServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuoteSwapServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuoteSwapService_ServiceDesc, srv)
}

func _QuoteSwapService_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteSwapServiceServer).GetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuoteSwapService_GetQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteSwapServiceServer).GetQuote(ctx, req.(*GetQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteSwapService_ExecuteSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteSwapServiceServer).ExecuteSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuoteSwapService_ExecuteSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteSwapServiceServer).ExecuteSwap(ctx, req.(*ExecuteTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuoteSwapService_ServiceDesc is the grpc.ServiceDesc for QuoteSwapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuoteSwapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quoteswap.QuoteSwapService",
	HandlerType: (*QuoteSwapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuote",
			Handler:    _QuoteSwapService_GetQuote_Handler,
		},
		{
			MethodName: "ExecuteSwap",
			Handler:    _QuoteSwapService_ExecuteSwap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quoteswap/quoteswap.proto",
}
